Bill Burdick's mods to Coffeescript
====

More info below the Coffeescript readme contents...

=
            {
         }   }   {
        {   {  }  }
         }   }{  {
        {  }{  }  }                    _____       __  __
       ( }{ }{  { )                   / ____|     / _|/ _|
     .- { { }  { }} -.               | |     ___ | |_| |_ ___  ___
    (  ( } { } { } }  )              | |    / _ \|  _|  _/ _ \/ _ \
    |`-..________ ..-'|              | |___| (_) | | | ||  __/  __/
    |                 |               \_____\___/|_| |_| \___|\___|
    |                 ;--.
    |                (__  \            _____           _       _
    |                 | )  )          / ____|         (_)     | |
    |                 |/  /          | (___   ___ _ __ _ _ __ | |_
    |                 (  /            \___ \ / __| '__| | '_ \| __|
    |                 |/              ____) | (__| |  | | |_) | |_
    |                 |              |_____/ \___|_|  |_| .__/ \__|
     `-.._________..-'                                  | |
                                                        |_|


  CoffeeScript is a little language that compiles into JavaScript.

  Install Node.js, and then the CoffeeScript compiler:
  sudo bin/cake install

  Or, if you have the Node Package Manager installed:
  npm install coffee-script

  Compile a script:
  coffee /path/to/script.coffee

  For documentation, usage, and examples, see:
  http://coffeescript.org/

  To suggest a feature, report a bug, or general discussion:
  http://github.com/jashkenas/coffee-script/issues/

  If you'd like to chat, drop by #coffeescript on Freenode IRC,
  or on webchat.freenode.net.

  The source repository:
  git://github.com/jashkenas/coffee-script.git

  All contributors are listed here:
  http://github.com/jashkenas/coffee-script/contributors

Bill's Mods
====
mofor -- a for-comprehension, like Scala's  Syntax:

      mofor
        binding | filter
        ...
      -> body

a binding is variable <- expr, where expr returns an object that conforms to these requirements:
 1. Understands map, flatMap, filter, and forEach
 1. Has a length property and is subscriptable (i.e. has properties for 0 -- length - 1)

If used as an expression, mofor will translate to a series of maps, flatMaps, and filters, resulting in a flattened collection of results.  If used as a statement, it translates into a series of forEaches and filters.  This will work for nested collection traversals and monads.

Here's an example that produces the cross product of two lists, where at least one of the lements is odd:

      crossValues = mofor
        n1 = numbers1
        n2 = numbers2
        if n1 % 2 != 0 or n2 % 2 != 0
      -> [n1, n2]

Equivalent Coffeescript would be:

      crossValues = []
      for n1 in numbers1
        for n2 in numbers2
	  if n1 % 2 != 0 or n2 % 2 != 0
	    crossValues.push [n1, n2]
